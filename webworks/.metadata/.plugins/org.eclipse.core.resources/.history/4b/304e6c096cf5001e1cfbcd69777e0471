<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>자바스크립트의 자료형</title>
<script type="text/javascript">

/* 1. 자바스크립트는 데이터타입에 관대하다
     변수를 선언할 때 데이타타입을 정하지 않는다
		(1) 변수 선언 : var
		[참고] 자바
		자료형 (int/double/String) 변수명;
		
		var -- > let(변수)  const(상수) 요즘은 이렇게 선언을 한다.
*/

var byeunsu = "문자열";
document.write("변수의 값:" + byeunsu + "<br/>");
console.log("변수의 값2:" + byeunsu + "<br/>")

var byeunsu = 1000;
document.write("변수의 값:" + byeunsu + "<br/>");
console.log("변수의 값2:" + byeunsu + "<br/>")



/*   (2) let  (es6)
 		- 변수의 중복 선언을 허용하지 않는다
 		- 블럭 범위(scope)를 인식한다 -> 나중에 확인
 */

let msg = "기존";
document.write("변수의 값:" +msg +"<br/>");
console.log("변수의 값: "+ msg + "<br/>");
msg = "변경";
document.write("변수의 값 "+ msg + "<br/>");
 

 /* (3) const : 상수선언 (es6)
	- 값을 재대입 금지
	- 명명 권장 : 모두 대문자에 단어사이는 _로 표시
*/
const PI = 3.14;
let radius = 5;
let won = 2*PI*radius;

//const data = [1,2,3];
//document.write("데이터 값: "+data +"<br/>");
//data[1] = 10000;  // 오류가 발생하지 않는다. 하지만
//data = [1,10000,3]; //이렇게 하면 오류가 발생한다.

// 둘의 차이는 배열안에 있는 값을 변경이 가능하지만 data 자체는 상수로 선언이 
// 되어 있기 때문에 변경이 불가능하다.

//스택에서는 상수로 선언이 되었지만 data안에 담겨있는 주소값이 변경이 가능하다.


document.write("데이터 값: "+data + "<br/>");


//PI = 1.23; 
//상수는 한번 정한 값을 못바꾼다.

console.log("원주율: "+won +"<br/>");
document.write("원주율: "+won +"<br/>");

//----------------------------------------------------------------
// 2. 리터럴 - 변수의 값
var   arr = [ '안녕', 'Hello', 'Hola', '곤니찌와' ];
document.write("배열의 값: "+ arr[2] + "<br/>");

 		
var   arr2 = [ '안녕', [ 'Hello', 'Hola' ], '곤니찌와' ];

document.write("두번째 배열의 값: "+arr2[1][1]+"<br/>");


var  obj = { x : '안녕',  y : 'Hello' ,  z : '곤니찌와' };

document.write("객체의 변수(프로퍼티): "+ obj.x +"<br/>");

document.write("객체의 변수(프로퍼티): "+ obj['x'] +"<br/>");

var x;
document.write("변수의 값: "+ x +"<br/>");

document.write("객체의 프로퍼티: "+ obj.a +"<br/>");


//-------------------------------------------------------
/* 3. 분할 대입 (destructuring assignment) : (es6) es6문법
 			- 배열과 객체의 요소를 분할하는 부분
 		(1) 배열 분할
 */
 var data = [10, 20, 30, 40, 50]; // 옛날의 배열 값을 불러 올때는 이렇게 불러 왔다.
 var a0 = data[0];
 var a1 = data[1];
 var a2 = data[2];
 var a3 = data[3];
 var a4 = data[4];
 document.writeln(a0+ a1+ a2 + "<br/>");  
 console.log(a0, a1, a2 )
 
 var [a0, a1, a3] = data;
 document.writeln(a0+ a1+ a2 + "<br/>");  
 console.log(a0, a1, a2 ) // 이렇게 하나의 변수에 배열값을 각자 받을 수 있다. 이 방식을
 // 요소 분할이라고 한다.
 
 // ... 연산자(남은 애들 연산자)
var [a,b, ...other] = data;
 console.log(a,b, other);
 //... other 배열에서 출력되지 않은 값들을 다시 배열로 만들어서 출력을 한다.
 // 쉽게 말해서 남은 배열들 끼리 새로 other라는 배열로 생성
 
 // 활용예시)
 let v1 = 100;
 let v2 = 200;
 
 [v2,v1] = [v1,v2];
 console.log("v1: " +v1);
 console.log("v2: " +v2);
 
 // 이렇게 코드를 짜면 자바에서 temp 값을 만들어서 값을 옮길 필요가 없어진다.
 /*  (2) 객체 분할
  */
 let book = { title:'masterbook',
	 		  publisher : 'Jpub',
	 		  price : 20000
	 		  };
document.write('제목: ' + book.title + "<br/>");
document.write('작가: ' + book.publisher + "<br/>");
document.write('가격: ' + book.title.price + "<br/>");

// let {title, price} = book;
//document.write("제목: "+ title + "<br/>");
//document.write("가격: "+ price + "<br/>");

let {title, price=10000, cate='기본값'} = book;
document.write('제목: ' + title + "<br/>");
document.write('가격: ' + price + "<br/>");
document.write('카테고리: ' + cate + "<br/>");
</script>
</head>
<body>

</body>
</html>